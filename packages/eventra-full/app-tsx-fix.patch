--- a/src/app/App.tsx
+++ b/src/app/App.tsx
@@ -1,199 +1,149 @@
-"use client";
-
-import React, { useState, useEffect, useMemo } from "react";
-import Link from "next/link";
-import { useLanguage } from "./components/LanguageProvider";
-import { useTranslations } from "./hooks/useTranslations";
-
-interface Event {
-  id: string;
-  publicId: string;
-  title: string;
-  description: string;
-  date: string;
-  location: string;
-  category?: string;
-  price?: number;
-  isFree?: boolean;
-  imageUrl?: string;
-}
+import React, { useEffect, useMemo, useState } from 'react';
+
+type EventItem = {
+  id: string;
+  title: string;
+  description?: string;
+  date?: string;
+  location?: string;
+  category?: string;
+};
 
 export default function App() {
-  const [events, setEvents] = useState<Event[]>([]);
+  const [events, setEvents] = useState<EventItem[]>([]);
   const [isLoading, setIsLoading] = useState(true);
-  const [currentPage, setCurrentPage] = useState(1);
-  const [selectedCity, setSelectedCity] = useState("All Cities");
-  const [selectedCategory, setSelectedCategory] = useState("All Categories");
-  const [activeSearchQuery, setActiveSearchQuery] = useState("");
-  
-  const { language, isRTL } = useLanguage();
-  const { t } = useTranslations();
-
-  const ITEMS_PER_PAGE = 12;
-
-  // Mock events data
-  const mockEvents: Event[] = [
-    {
-      id: "1",
-      publicId: "tech-summit-2025",
-      title: "Tech Summit 2025",
-      description: "Annual technology summit featuring latest innovations",
-      date: "2025-03-15T10:00:00Z",
-      location: "Baghdad Tech Center",
-      category: "Technology",
-      price: 50,
-      isFree: false,
-    },
-    {
-      id: "2",
-      publicId: "music-fest",
-      title: "Kurdistan Music Festival",
-      description: "Traditional and modern Kurdish music celebration",
-      date: "2025-04-20T18:00:00Z",
-      location: "Erbil Cultural Center",
-      category: "Music",
-      price: 0,
-      isFree: true,
-    }
-  ];
-
-  // Load events on mount
+  const [selectedCity, setSelectedCity] = useState<string>('');
+  const [selectedCategory, setSelectedCategory] = useState<string>('');
+  const [activeSearchQuery, setActiveSearchQuery] = useState<string>('');
+  const [lang, setLang] = useState<string>('en');
+  const [currentPage, setCurrentPage] = useState<number>(1);
+  const pageSize = 6;
+
+  // Simulate loading / fetch
   useEffect(() => {
-    setTimeout(() => {
-      setEvents(mockEvents);
+    const t = setTimeout(() => {
+      // Example sample data
+      setEvents([
+        { id: '1', title: 'Tech Summit', category: 'tech', location: 'Erbil' },
+        { id: '2', title: 'Music Fest', category: 'music', location: 'Baghdad' },
+        { id: '3', title: 'Art Expo', category: 'art', location: 'Mosul' },
+        { id: '4', title: 'Business Meetup', category: 'business', location: 'Basra' },
+        { id: '5', title: 'Marathon', category: 'sports', location: 'Kirkuk' },
+        { id: '6', title: 'Food Fair', category: 'food', location: 'Najaf' },
+        { id: '7', title: 'Health Camp', category: 'health', location: 'Karbala' },
+      ]);
       setIsLoading(false);
-    }, 1000);
+    }, 400);
+    return () => clearTimeout(t);
   }, []);
 
+  // --- IMPORTANT FIX ---
   // Reset pagination when filters change
+  // Do NOT call setCurrentPage inside useMemo (that would be during render).
   useEffect(() => {
     setCurrentPage(1);
-  }, [selectedCity, selectedCategory, activeSearchQuery, language]);
+  }, [selectedCity, selectedCategory, activeSearchQuery, lang]);
 
-  // FIXED: Pure useMemo without side effects
+  // Pure memo for filtered events (no side effects)
   const filteredEvents = useMemo(() => {
-    let filtered = events;
-
-    // Filter by search query
-    if (activeSearchQuery) {
-      filtered = filtered.filter(event =>
-        event.title.toLowerCase().includes(activeSearchQuery.toLowerCase()) ||
-        event.description.toLowerCase().includes(activeSearchQuery.toLowerCase())
-      );
-    }
-
-    // Filter by city
-    if (selectedCity !== "All Cities") {
-      filtered = filtered.filter(event =>
-        event.location.toLowerCase().includes(selectedCity.toLowerCase())
-      );
-    }
-
-    // Filter by category
-    if (selectedCategory !== "All Categories") {
-      filtered = filtered.filter(event => event.category === selectedCategory);
-    }
-
-    return filtered;
-  }, [events, activeSearchQuery, selectedCity, selectedCategory, language]);
-
-  // Paginate filtered events
-  const paginatedEvents = useMemo(() => {
-    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
-    return filteredEvents.slice(startIndex, startIndex + ITEMS_PER_PAGE);
-  }, [filteredEvents, currentPage]);
-
-  const totalPages = Math.ceil(filteredEvents.length / ITEMS_PER_PAGE);
+    const q = activeSearchQuery.trim().toLowerCase();
+    return events.filter((e) => {
+      if (selectedCity && selectedCity !== 'All Cities' && e.location && e.location !== selectedCity) {
+        return false;
+      }
+      if (selectedCategory && selectedCategory !== 'All Categories' && e.category && e.category !== selectedCategory) {
+        return false;
+      }
+      if (q && !(e.title.toLowerCase().includes(q) || (e.description || '').toLowerCase().includes(q))) {
+        return false;
+      }
+      return true;
+    });
+  }, [events, selectedCity, selectedCategory, activeSearchQuery, lang]);
+
+  const pageCount = Math.max(1, Math.ceil(filteredEvents.length / pageSize));
+  const pagedEvents = filteredEvents.slice((currentPage - 1) * pageSize, currentPage * pageSize);
 
-  // FIXED: Return proper JSX for loading state
   if (isLoading) {
     return (
-      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
-        <div className="text-center">
-          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto mb-4"></div>
-          <p className="text-xl text-gray-600">Loading Eventara...</p>
-        </div>
+      <div style={{ minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
+        <div role="status" aria-live="polite">
+          <strong>Loading Eventara...</strong>
+        </div>
       </div>
     );
   }
 
   return (
-    <div className="min-h-screen bg-gray-50">
-      <div className="container mx-auto px-4 py-8">
-        <h1 className="text-3xl font-bold text-gray-900 mb-8">
-          {t('events.title', 'Events')}
-        </h1>
-
-        {/* Filter Controls */}
-        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
-          <input
-            type="text"
-            placeholder="Search events..."
-            value={activeSearchQuery}
-            onChange={(e) => setActiveSearchQuery(e.target.value)}
-            className="px-4 py-2 border border-gray-300 rounded-lg"
-          />
-          <select
-            value={selectedCity}
-            onChange={(e) => setSelectedCity(e.target.value)}
-            className="px-4 py-2 border border-gray-300 rounded-lg"
-          >
-            <option value="All Cities">All Cities</option>
-            <option value="Baghdad">Baghdad</option>
-            <option value="Erbil">Erbil</option>
-          </select>
-          <select
-            value={selectedCategory}
-            onChange={(e) => setSelectedCategory(e.target.value)}
-            className="px-4 py-2 border border-gray-300 rounded-lg"
-          >
-            <option value="All Categories">All Categories</option>
-            <option value="Technology">Technology</option>
-            <option value="Music">Music</option>
-          </select>
-        </div>
-
-        {/* Events Grid */}
-        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
-          {paginatedEvents.map((event) => (
-            <Link
-              key={event.id}
-              href={`/event/${event.publicId}`}
-              className="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow"
-            >
-              <h3 className="text-xl font-semibold text-gray-900 mb-2">
-                {event.title}
-              </h3>
-              <p className="text-gray-600 mb-4">{event.description}</p>
-              <div className="flex justify-between items-center">
-                <span className="text-sm text-gray-500">{event.location}</span>
-                <span className="text-lg font-bold text-blue-600">
-                  {event.isFree ? 'Free' : `$${event.price}`}
-                </span>
-              </div>
-            </Link>
-          ))}
-        </div>
-
-        {/* Pagination */}
-        {totalPages > 1 && (
-          <div className="flex justify-center space-x-2">
-            {Array.from({ length: totalPages }, (_, i) => (
-              <button
-                key={i + 1}
-                onClick={() => setCurrentPage(i + 1)}
-                className={`px-4 py-2 rounded-lg ${
-                  currentPage === i + 1
-                    ? 'bg-blue-600 text-white'
-                    : 'bg-white text-gray-700 border border-gray-300'
-                }`}
-              >
-                {i + 1}
-              </button>
-            ))}
-          </div>
-        )}
+    <div style={{ padding: 20 }}>
+      <h1>Eventara â€” Events</h1>
+
+      {/* Simple filter controls so tests can drive state */}
+      <div style={{ margin: '12px 0', display: 'flex', gap: 8, alignItems: 'center' }}>
+        <select
+          aria-label="city-select"
+          value={selectedCity}
+          onChange={(e) => setSelectedCity(e.target.value)}
+        >
+          <option>All Cities</option>
+          <option>Erbil</option>
+          <option>Baghdad</option>
+          <option>Mosul</option>
+        </select>
+
+        <select
+          aria-label="category-select"
+          value={selectedCategory}
+          onChange={(e) => setSelectedCategory(e.target.value)}
+        >
+          <option>All Categories</option>
+          <option>tech</option>
+          <option>music</option>
+          <option>art</option>
+        </select>
+
+        <input
+          aria-label="search-input"
+          placeholder="Search..."
+          value={activeSearchQuery}
+          onChange={(e) => setActiveSearchQuery(e.target.value)}
+        />
+
+        <select aria-label="lang-select" value={lang} onChange={(e) => setLang(e.target.value)}>
+          <option value="en">en</option>
+          <option value="ar">ar</option>
+        </select>
+      </div>
+
+      <div>
+        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill,minmax(200px,1fr))', gap: 12 }}>
+          {pagedEvents.map((ev) => (
+            <div key={ev.id} style={{ border: '1px solid #ddd', padding: 12, borderRadius: 8 }}>
+              <h3>{ev.title}</h3>
+              <div style={{ fontSize: 12, color: '#666' }}>{ev.location} â€” {ev.category}</div>
+            </div>
+          ))}
+        </div>
       </div>
+
+      {/* Simple pagination */}
+      <div style={{ marginTop: 16, display: 'flex', gap: 8, alignItems: 'center' }}>
+        <button
+          aria-label="prev-page"
+          onClick={() => setCurrentPage((p) => Math.max(1, p - 1))}
+          disabled={currentPage === 1}
+        >
+          Prev
+        </button>
+        <span aria-live="polite">Page {currentPage} / {pageCount}</span>
+        <button
+          aria-label="next-page"
+          onClick={() => setCurrentPage((p) => Math.min(pageCount, p + 1))}
+          disabled={currentPage === pageCount}
+        >
+          Next
+        </button>
+      </div>
     </div>
   );
 }
